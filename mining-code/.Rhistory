# Read the dataset from the specified path
dataset <- read.csv("D:/Documents/master/mldm/m1/data-mining/data/Sudden-Cardiac-Death-Holter-Database.csv")
# Remove the 'record' column
dataset <- subset(dataset, select = -record)
# Display only the first two rows of the dataset
print(head(dataset, n = 2))
# Check the variable types in the dataset
print(str(dataset))
# Check for class imbalance in the 'type' column
type_counts <- table(dataset$type)
print(type_counts)
# Check for missing values in the dataset
missing_values <- colSums(is.na(dataset))
print(missing_values)
# Transform 'type' column into binary classification
dataset$type <- ifelse(dataset$type %in% c('VEB', 'SVEB', 'F', 'Q'), 'arrhythmia', 'normal')
# Convert 'arrhythmia' to 0 and 'normal' to 1
dataset$type <- ifelse(dataset$type == 'arrhythmia', 0, 1)
# Display the transformed 'type' column
print(table(dataset$type))
install.packages("e1071")
# Load the e1071 package for skewness calculation
library(e1071)
if (!require(e1071)) install.packages("e1071")
library(e1071)
# Check skewness of numerical columns
cat("\nSkewness of numerical columns:\n")
numerical_columns <- sapply(dataset, is.numeric)
skewness_values <- sapply(dataset[, numerical_columns], skewness)
print(skewness_values)
# Check kurtosis of numerical columns
cat("\nKurtosis of numerical columns:\n")
kurtosis_values <- sapply(dataset[, numerical_columns], kurtosis)
print(kurtosis_values)
# Create boxplots for numerical features excluding 'type' column
cat("\nBoxplots of numerical features excluding 'type' column:\n")
numerical_columns <- names(dataset)[sapply(dataset, is.numeric) & names(dataset) != "type"]
boxplot(dataset[, numerical_columns], main = "Boxplots of Numerical Features", las = 2)
# Check correlation matrix using Spearman method
cat("\nCorrelation matrix (Spearman method):\n")
correlation_matrix <- cor(dataset[, numerical_columns], method = "spearman", use = "complete.obs")
print(correlation_matrix)
install.packages("corrplot")
library(corrplot)
corrplot(correlation_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
orrplot(correlation_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, tl.cex = 0.8, cl.cex = 0.8)
corrplot(correlation_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, tl.cex = 0.8, cl.cex = 0.8)
corrplot(correlation_matrix, method = "color", type = "full",
tl.col = "black", tl.srt = 45, tl.cex = 0.8, cl.cex = 0.8)
corrplot(correlation_matrix, method = "color", type = "full",
tl.col = "black", tl.srt = 45, tl.cex = 0.6, cl.cex = 0.8)
corrplot(correlation_matrix, method = "color", type = "full",
tl.col = "black", tl.srt = 45, tl.cex = 0.6, cl.cex = 0.6)
corrplot(correlation_matrix, method = "color", type = "full",
tl.col = "black", tl.srt = 45, tl.cex = 0.4, cl.cex = 0.6)
corrplot(correlation_matrix, method = "color", type = "full",
tl.col = "black", tl.srt = 45, tl.cex = 0.5, cl.cex = 0.6)
# Check skewness of numerical columns
cat("\nSkewness of numerical columns:\n")
numerical_columns <- sapply(dataset, is.numeric)
skewness_values <- sapply(dataset[, numerical_columns], skewness)
print(skewness_values)
# Create a bar plot for skewness values
skewness_df <- data.frame(Feature = names(skewness_values), Skewness = skewness_values)
ggplot(skewness_df, aes(x = reorder(Feature, Skewness), y = Skewness)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Skewness of Numerical Features", x = "Feature", y = "Skewness") +
theme_minimal()
install.packages('ggplot')
library('ggplot')
# ...existing code...
# Install and load the ggplot2 package
install.packages("ggplot2")
library(ggplot2)
# Check skewness of numerical columns
cat("\nSkewness of numerical columns:\n")
numerical_columns <- names(dataset)[sapply(dataset, is.numeric) & names(dataset) != "type"]
skewness_values <- sapply(dataset[, numerical_columns], skewness)
print(skewness_values)
# Create a bar plot for skewness values
skewness_df <- data.frame(Feature = names(skewness_values), Skewness = skewness_values)
ggplot(skewness_df, aes(x = reorder(Feature, Skewness), y = Skewness)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Skewness of Numerical Features", x = "Feature", y = "Skewness") +
theme_minimal()
# Check kurtosis of numerical columns
cat("\nKurtosis of numerical columns:\n")
kurtosis_values <- sapply(dataset[, numerical_columns], kurtosis)
print(kurtosis_values)
# Create a bar plot for kurtosis values
kurtosis_df <- data.frame(Feature = names(kurtosis_values), Kurtosis = kurtosis_values)
ggplot(kurtosis_df, aes(x = reorder(Feature, Kurtosis), y = Kurtosis)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Kurtosis of Numerical Features", x = "Feature", y = "Kurtosis") +
theme_minimal()
cat("\nSkewness of numerical columns:\n")
numerical_columns <- names(dataset)[sapply(dataset, is.numeric) & names(dataset) != "type"]
skewness_values <- sapply(dataset[, numerical_columns], function(x) {
if (all(is.na(x))) {
return(NA)
} else {
return(skewness(x, na.rm = TRUE))
}
})
print(skewness_values)
# Check skewness of numerical columns
cat("\nSkewness of numerical columns:\n")
numerical_columns <- names(dataset)[sapply(dataset, is.numeric) & names(dataset) != "type"]
skewness_values <- sapply(dataset[, numerical_columns], function(x) {
if (all(is.na(x))) {
return(NA)
} else {
return(skewness(x, na.rm = TRUE))
}
})
print(skewness_values)
# Create a bar plot for skewness values
skewness_df <- data.frame(Feature = names(skewness_values), Skewness = skewness_values)
ggplot(skewness_df, aes(x = reorder(Feature, Skewness), y = Skewness)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Skewness of Numerical Features", x = "Feature", y = "Skewness") +
theme_minimal()
# Check kurtosis of numerical columns
cat("\nKurtosis of numerical columns:\n")
kurtosis_values <- sapply(dataset[, numerical_columns], function(x) {
if (all(is.na(x))) {
return(NA)
} else {
return(kurtosis(x, na.rm = TRUE))
}
})
print(kurtosis_values)
# Create a bar plot for kurtosis values
kurtosis_df <- data.frame(Feature = names(kurtosis_values), Kurtosis = kurtosis_values)
ggplot(kurtosis_df, aes(x = reorder(Feature, Kurtosis), y = Kurtosis)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Kurtosis of Numerical Features", x = "Feature", y = "Kurtosis") +
theme_minimal()
#new
